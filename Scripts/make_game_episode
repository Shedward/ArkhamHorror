#!/usr/bin/env python

import argparse
import tempfile
import os
import shutil

template_path = "./Templates/GameEpisode"
game_episodes_path = "./Applications/Game/Game/Sources/Game/Scene/Episodes"

parser = argparse.ArgumentParser(
    prog="make_game_episode",
    description="Generates template of Game episode")
parser.add_argument('episode_name', help="prefix used for episode")
args = parser.parse_args()

def replace_template(key, value, string):
    class_key = "___" + key.upper() + "___"
    class_value = value
    string = string.replace(class_key, class_value)

    func_key = "___" + key.lower() + "___"
    func_value = value[0].lower() + value[1:]
    string = string.replace(func_key, func_value)

    return string

def replace_all_templates(string):
    return replace_template("episode", args.episode_name, string)


with tempfile.TemporaryDirectory() as working_dir:
    shutil.copytree(template_path, working_dir, dirs_exist_ok=True)

    for root, dirs, files in os.walk(working_dir, topdown=False):
        dirs = [d for d in dirs if not d.startswith(".")]
        files = [f for f in files if not f.startswith(".")]

        for file in files:
            file_path = root + "/" + file
            with open(file_path, "r") as file_desc:
                filedata = file_desc.read()
            filedata = replace_all_templates(filedata)
            with open(file_path, "w") as file_desc:
                file_desc.write(filedata)

        for item in files + dirs:
            new_item = replace_all_templates(item)
            if item != new_item:
                os.replace(root + "/" + item, root + "/" + new_item)

    shutil.copytree(working_dir, game_episodes_path, dirs_exist_ok=True)